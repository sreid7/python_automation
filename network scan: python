--Python Network Scan Using NMAP--
TCP scan (lower privileges)

__Installations that need to be made__
Kali Linux commands
    sudo apt-get install ufw 
    (to check the firewall status)
    sudo ufw status (kali linux command)
Status: inactive (resulting in no active firewall blockage)
Status: active (resulting in an active firewall blockage and further investigation is needed)
__Another way to remediate this is to add the -Pn option within the python nmap script in order to ignore the online status of the target.__
__Below is a python automation script that is a preliminary research scan aimed at gathering basic information about the target system. 
After I have explicit permission and proper authorization, I can incorporate techniques for bypassing firewalls, 
such as adjusting timing options, using proxy chains, or leveraging VPNs.

***CODE STARTS HERE*** (Python Code automatically uploads and saves scanned port results in a text file)

import subprocess

def scan_network(ip_address, output_file):
    with open(output_file, 'w') as f:
        f.write("Starting network scan...\n")
        
        # Execute Nmap command with -Pn, -sT, -sV, and -v options
        nmap_cmd = ['nmap', '-sT', '-Pn', '-sV', '-v', '-p', '1-1023', ip_address]
        process = subprocess.Popen(nmap_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Capture and write Nmap output to the file
        stdout, stderr = process.communicate()
        f.write(stdout)

        # Check for errors
        if stderr:
            f.write(f"Error occurred: {stderr}\n")
        else:
            f.write("Scan completed.\n")

if __name__ == '__main__':
    ip_address = 'PLACE TARGET IP ADDRESS HERE'
    output_file = 'scan_results.txt'
    print(f"Scanning network {ip_address}...")
    scan_network(ip_address, output_file)
    print(f"Scan results written to {output_file}")


